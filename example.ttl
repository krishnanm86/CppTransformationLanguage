namespace A: SCALAR === VC
    #include <VC>

    map VCTYPES(int:int_v, float:float_v);;
    tag LOOP<id var>;;  // explicit tag
    tag LOOPTYPE<type var>;;   
    tag STRUCTTYPE<type var>;;
    tag VC_STRUCT;;
        
    type a[s] = SCALAR(type VCTYPES(a)[s/VCTYPES(a)::Size]){{
       where a in VCTYPES.keys
    }}
    
    type struct{STRUCTTYPE<ty>($BODY)}[s] ===  
                    SCALAR(struct{VC_STRUCT($BODY)}[s/ty::size]);;   // Label A
    
    VC_STRUCT{{    

      //Propagating the Structtype up the AST
      decl a === SCALAR(STRUCTTYPE<VCTYPES(decltype(a)>(a)){{
         where decltype(a) in VCTYPES.keys
      }}
        
      decl t a === SCALAR(decl VCTYPES(t) a){{
         where t in VCTYPES.keys
      }}
    }}

    stmt for(int i; i < limit; i++) LOOPTYPE<ty>($BODY)  === 
       SCALAR(for(int i; i < limit / ty::Size; i++) LOOP<i>(VC($BODY)));;  \\Label B

    LOOP<i> {{  // tag dependency, passing the index of the loop down the AST        
    
        //Propagating the LoopType up the AST
        expr a[i] === SCALAR(LOOPTYPE<VCTYPES(decltype(a)>(a[i])){{
           where decltype(a) in VCTYPES.keys
        }}
     
        decl a === SCALAR(VCTYPES(decltype(a)){{
           where decltype(a) in VCTYPES.keys
        }}     
        
        expr std::sqrt(x) === SCALAR(expr VC::sqrt(x));;
    }}